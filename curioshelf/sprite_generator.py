"""
Legacy sprite generator module for backward compatibility.
This module provides the old interface while the new plugin-based system is in sprite_generator/.
"""

from .sprite_generators import SpriteGenerator, StickFigurePlugin


def generate_sample_sprites(output_dir: str = "samples", count: int = 10, width: int = 64, height: int = 64, color: str = "black"):
    """Generate sample sprites for testing (legacy function)"""
    
    # Create a sprite generator with the stick figure plugin
    generator = SpriteGenerator()
    generator.register_plugin(StickFigurePlugin())
    
    # Generate individual sprites (not sprite sheet)
    # For now, we'll use the old individual file approach
    from pathlib import Path
    import os
    
    # Create output directory
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # Create subdirectories for each animation type
    animations = {
        "walk": "Walk Cycle",
        "stopping": "Coming to Stop", 
        "speeding_up": "Speeding Up",
        "jumping": "Jumping"
    }
    
    # Use the plugin to generate sprites
    plugin_data = StickFigurePlugin().generate_sprites(
        frames_per_animation=count,
        sprite_width=width,
        sprite_height=height,
        color=color
    )
    
    # Extract individual frames and save them
    # Create animation directories first
    for anim_name in animations.keys():
        anim_dir = output_path / anim_name
        anim_dir.mkdir(exist_ok=True)
    
    # Generate sprites for the requested color
    from .sprite_generators.plugins.stick_figure import StickFigureSprite
    sprite_gen = StickFigureSprite(width, height, color)
    
    # Generate frames for each animation type
    for anim_name in animations.keys():
        # Generate the specific frame
        if anim_name == "walk":
            frames = sprite_gen.generate_walk_cycle(count)
        elif anim_name == "stopping":
            frames = sprite_gen.generate_stopping_cycle(count)
        elif anim_name == "speeding_up":
            frames = sprite_gen.generate_speeding_up_cycle(count)
        elif anim_name == "jumping":
            frames = sprite_gen.generate_jumping_cycle(count)
        else:
            continue
        
        # Save each frame
        for frame_idx, frame in enumerate(frames):
            filename = f"{anim_name}_{frame_idx:03d}.svg"
            filepath = output_path / anim_name / filename
            
            with open(filepath, 'w') as f:
                f.write(frame)
    
    # Create a README file
    readme_path = output_path / "README.md"
    with open(readme_path, 'w') as f:
        readme_content = f"""# Sample Sprites

This directory contains sample sprites generated by CurioShelf for testing purposes.

## Animation Types

- **walk/**: Walk cycle animation ({count} frames)
- **stopping/**: Coming to stop animation ({count} frames)  
- **speeding_up/**: Speeding up animation ({count} frames)
- **jumping/**: Jumping animation ({count} frames)

## Sprite Specifications

- **Size**: {width}x{height} pixels
- **Format**: SVG (Scalable Vector Graphics)
- **Style**: Classic stick figure
- **Color**: {color}

## Usage

These sprites can be imported into CurioShelf projects for testing the asset management features.

Generated by CurioShelf Sprite Generator
"""
        f.write(readme_content)
    
    print(f"\nSample sprites generated successfully in '{output_dir}' directory!")
    print(f"Total animations: {len(animations)}")
    print(f"Total frames: {len(animations) * count}")
    print(f"README created: {readme_path}")


def generate_sprite_sheet(output_dir: str = "samples", frames_per_animation: int = 10, 
                         sprite_width: int = 64, sprite_height: int = 64):
    """Generate a single large SVG sprite sheet with all animations and color variations (legacy function)"""
    
    # Create a sprite generator with the stick figure plugin
    generator = SpriteGenerator()
    generator.register_plugin(StickFigurePlugin())
    
    # Generate the sprite sheet
    generator.generate_sprite_sheet(
        output_dir=output_dir,
        frames_per_animation=frames_per_animation,
        sprite_width=sprite_width,
        sprite_height=sprite_height
    )