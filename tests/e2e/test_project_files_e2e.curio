# Test Project File System Operations End-to-End
# This script tests that project files are created and managed correctly

print("=== Project File System Operations End-to-End Test ===")
print("Testing: File Creation -> File Verification -> File Management")

# Test 1: Create a project and verify files
print("\n1. Creating Project and Verifying Files...")
trigger_menu("Project", "New Project")
print("   Waiting for project creation...")

if is_project_loaded():
    print("   ✅ Project created successfully!")
    
    # Get project info
    project_info := get_project_info()
    project_name := project_info.get("name", "Unknown")
    project_path := project_info.get("path", "Unknown")
    
    print("   Project name:", project_name)
    print("   Project path:", project_path)
    
    # Test 2: Verify project structure
    print("\n2. Verifying Project Structure:")
    print("   Project directory exists:", project_path != "")
    print("   Project name is valid:", project_name != "Unknown")
    
    # Test 3: Check project configuration file
    print("\n3. Checking Project Configuration:")
    try:
        structure := get_project_structure()
        print("   Project structure loaded:", structure != {})
        if structure != {}:
            print("   Sources count:", len(structure.get("sources", [])))
            print("   Templates count:", len(structure.get("templates", [])))
            print("   Objects count:", len(structure.get("objects", [])))
            print("   Project metadata available:", structure.get("metadata") != {})
    except:
        print("   Project structure not available yet")
    
    # Test 4: Test source import (if available)
    print("\n4. Testing Source Import Capability:")
    print("   Can import source:", can_import_source())
    print("   Has sources:", has_sources())
    
    # Test 5: Test object creation (if available)
    print("\n5. Testing Object Creation Capability:")
    print("   Can create object:", can_create_object())
    print("   Can create template:", can_create_template())
    
    # Test 6: Test project save capability
    print("\n6. Testing Project Save Capability:")
    print("   Can save project:", can_save_project())
    
    # Test 7: Close and verify cleanup
    print("\n7. Testing Project Close and Cleanup:")
    trigger_menu("Project", "Close Project")
    print("   Waiting for project close...")
    
    print("   Post-Close State:")
    print("   Project loaded:", is_project_loaded())
    print("   Can create project:", can_create_project())
    print("   Can open project:", can_open_project())
    print("   Can save project:", can_save_project())
    print("   Can close project:", can_close_project())
    print("   Can import source:", can_import_source())
    print("   Can create object:", can_create_object())
    print("   Can create template:", can_create_template())
    
    if not is_project_loaded():
        print("   ✅ Project closed successfully!")
        print("   ✅ UI state reset correctly!")
    else:
        print("   ❌ Project close failed!")
    
else:
    print("   ❌ Project creation failed!")
    print("   Cannot test file system operations")

print("\n=== Project File System Test Results ===")
if not is_project_loaded():
    print("✅ SUCCESS: Project file system operations completed successfully")
    print("   - Project was created with proper structure")
    print("   - Project configuration was accessible")
    print("   - Project was closed and UI reset")
    print("   - All file system operations worked correctly")
else:
    print("❌ FAILURE: Project file system operations failed")
    print("   - Check individual test results above for details")

exit(0)
