# CurioShelf Comprehensive End-to-End Test
# This script tests the complete application workflow including UI interactions

print("=== CurioShelf Comprehensive E2E Test ===")
print("Testing complete application workflow with UI interactions")

# Test 1: Initial Application State
print("\n=== Test 1: Initial Application State ===")
print("Checking initial application state...")

# Check if project is loaded (should be false initially)
project_loaded := is_project_loaded()
print("Project loaded initially:", project_loaded)
assert(not project_loaded, "Project should not be loaded initially")

# Check UI state functions
can_create := can_create_project()
can_open := can_open_project()
can_save := can_save_project()
can_close := can_close_project()

print("Can create project:", can_create)
print("Can open project:", can_open)
print("Can save project:", can_save)
print("Can close project:", can_close)

# These should be true initially
assert(can_create, "Should be able to create project initially")
assert(can_open, "Should be able to open project initially")
assert(not can_save, "Should not be able to save project initially")
assert(not can_close, "Should not be able to close project initially")

# Test 2: Project Creation via UI
print("\n=== Test 2: Project Creation via UI ===")
print("Triggering New Project menu...")

# Trigger the New Project menu item
trigger_menu("Project", "New Project")
print("New Project menu triggered")

# Wait a moment for the dialog to appear and be auto-responded
print("Waiting for project creation to complete...")

# Check if project was created
project_loaded_after_create := is_project_loaded()
print("Project loaded after creation:", project_loaded_after_create)
assert(project_loaded_after_create, "Project should be loaded after creation")

# Get project information
project_info := get_project_info()
print("Project info:", project_info)
assert(project_info.get("name", "") != "", "Project should have a name")
assert(project_info.get("path", "") != "", "Project should have a path")

# Check UI state after project creation
can_save_after_create := can_save_project()
can_close_after_create := can_close_project()
can_create_after_create := can_create_project()
can_open_after_create := can_open_project()

print("Can save after creation:", can_save_after_create)
print("Can close after creation:", can_close_after_create)
print("Can create after creation:", can_create_after_create)
print("Can open after creation:", can_open_after_create)

assert(can_save_after_create, "Should be able to save project after creation")
assert(can_close_after_create, "Should be able to close project after creation")
assert(not can_create_after_create, "Should not be able to create project when one is loaded")
assert(not can_open_after_create, "Should not be able to open project when one is loaded")

# Test 3: Project Structure and Asset Management
print("\n=== Test 3: Project Structure and Asset Management ===")

# Get project structure
project_structure := get_project_structure()
print("Project structure:", project_structure)

# Check initial asset counts
initial_counts := get_asset_counts()
print("Initial asset counts:", initial_counts)
assert(initial_counts.get("sources", 0) == 0, "Should start with 0 sources")
assert(initial_counts.get("objects", 0) == 0, "Should start with 0 objects")
assert(initial_counts.get("templates", 0) == 0, "Should start with 0 templates")

# Test 4: Save Project
print("\n=== Test 4: Save Project ===")
print("Saving project...")

save_result := save_project()
print("Save result:", save_result)
assert(save_result, "Project save should succeed")

# Test 5: Close Project
print("\n=== Test 5: Close Project ===")
print("Closing project...")

close_result := close_project()
print("Close result:", close_result)
assert(close_result, "Project close should succeed")

# Check state after closing
project_loaded_after_close := is_project_loaded()
print("Project loaded after close:", project_loaded_after_close)
assert(not project_loaded_after_close, "Project should not be loaded after closing")

# Check UI state after closing
can_create_after_close := can_create_project()
can_open_after_close := can_open_project()
can_save_after_close := can_save_project()
can_close_after_close := can_close_project()

print("Can create after close:", can_create_after_close)
print("Can open after close:", can_open_after_close)
print("Can save after close:", can_save_after_close)
print("Can close after close:", can_close_after_close)

assert(can_create_after_close, "Should be able to create project after closing")
assert(can_open_after_close, "Should be able to open project after closing")
assert(not can_save_after_close, "Should not be able to save project after closing")
assert(not can_close_after_close, "Should not be able to close project after closing")

# Test 6: Project Opening via UI
print("\n=== Test 6: Project Opening via UI ===")
print("Triggering Open Project menu...")

# Trigger the Open Project menu item
trigger_menu("Project", "Open Project")
print("Open Project menu triggered")

# Wait for dialog and auto-response
print("Waiting for project opening to complete...")

# Check if project was opened (this might fail if no projects exist)
project_loaded_after_open := is_project_loaded()
print("Project loaded after open:", project_loaded_after_open)

# Initialize variable before if statement
project_info_after_open := ""

if project_loaded_after_open:
    # If a project was opened, get its info
    project_info_after_open := get_project_info()
    print("Project info after open:", project_info_after_open)
    
    # Close it again
    close_result_2 := close_project()
    print("Close result after open:", close_result_2)
else:
    print("No project was opened (likely no projects available)")

# Test 7: Menu State Verification
print("\n=== Test 7: Menu State Verification ===")
print("Verifying menu states in different application states...")

# Test with no project loaded
print("Testing menu states with no project loaded...")
can_create_final := can_create_project()
can_open_final := can_open_project()
can_save_final := can_save_project()
can_close_final := can_close_project()

print("Final state - Can create:", can_create_final)
print("Final state - Can open:", can_open_final)
print("Final state - Can save:", can_save_final)
print("Final state - Can close:", can_close_final)

# Test 8: Application Status
print("\n=== Test 8: Application Status ===")
print("Checking final application status...")

# Get project status (should be empty)
final_status := get_project_status()
print("Final project status:", final_status)

# Verify no project is loaded
final_project_loaded := is_project_loaded()
print("Final project loaded state:", final_project_loaded)
assert(not final_project_loaded, "No project should be loaded at the end")

print("\n=== Comprehensive E2E Test Complete ===")
print("All tests passed successfully!")

# Exit gracefully
exit(0)
